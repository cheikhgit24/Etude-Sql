q()
install.packages("shiny")
#création de la variable
age<-23
age
install.packages("ggplot2")
# vecteur Create
notes <- c(20, 19, 18, 17, 9, 8, 12)
# lire le premier élement Read
notes[1]
# Deuxième élément
notes[2]
# Dernier élément du vecteur
notes[length(notes)]
# Mettre à jour le vecteur
notes[6] <- 14
notes
notes[5] <- 15
notes
# Supprimer un élément dans un vecteur (Delete)
notes <- notes[-3]
notes
length(notes)
notes <- c(20, 19, 18, 17, 9, 8, 12)
# ajouter une nouvelle notes
notes <- c(notes, 19)
notes
# Nom des matières
nom_matiere <- c("R", "Python", "Algèbre", "Analyse","Algèbre", "Analyse")
# Type des noms de matière
str(nom_matiere)
liste_etudiants <- list(Nom = "Warys", Age = 24, Note = notes)
# Type de données
str(liste_etudiants)
liste_etudiants$Nom
liste_etudiants$Age
liste_etudiants$Note
liste_2 <- list(Nom = "Warys", Age = 24, Note = notes)
liste_3 <- list(temp = liste_etudiants, tempbis = liste_2)
liste_3$liste_1
liste_3 <- list(liste_etudiants, liste_2)
liste_3[["temp"]]
test <-1:9
matrice_1 <- matrix(1:9, ncol = 3, nrow = 3)
matrice_1
df <- data.frame(Noms=c("Diouf", "Sourou", "Georges"), Age = c(28, 30, 18))
df
View(df)
clients <- read.csv("C:/Users/hp/Desktop/COIN STAT/DLCR/JOUR2/Base_Clients.csv", sep = ";", dec =".")
vente <- read.csv("C:/Users/hp/Desktop/COIN STAT/DLCR/JOUR2/Base_Ventes.csv", sep = ";", dec =".")
View(vente)
install.packages("readxl")
library(readxl)
test <- read_excel("C:/Users/hp/Desktop/COIN STAT/DLCR/JOUR2/Base_Clients.xlsx")
head(clients, 5)
tail(clients, 5)
nrow(clients)
nrow(vente)
ncol(clients)
ncol(vente)
nom_colonne_client <- colnames(clients)
nom_colonne_vente <- colnames(vente)
summary(vente)
clients$AgeGroup <- as.factor(clients$AgeGroup)
clients$EducationLevel <- as.factor(clients$EducationLevel)
summary(clients)
unique(clients$AgeGroup)
categorie_stat <- table(clients$AgeGroup)
prop.table(categorie_stat)
sum(is.na(clients$AgeGroup))
sum(is.na(clients$EducationLevel))
summary(vente)
colSums(is.na(vente))
venteb <- vente
venteb$Price[is.na(venteb$Price)] <- 0
colSums(is.na(venteb))
ventec <- na.omit(vente)
dim(ventec)
colSums(is.na(ventec))
library(dplyr)
rename(clients, "Nom" = "Name")
View(clients)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
rename(clients, "Nom" = "Name")
rename(clients, "Nom" = "Name")
colnames(clients)[2] <- "Nombis"
View(clients)
View(vente)
vente$MontantTotal <- vente$Quantity * vente$Price
View(vente)
liste_produit <- vente[vente$Price > 40, ]
View(vente)
liste_premium <- clients[clients$CustomerCategory == "Premium", ]
liste_premium
jointure <- left_join(vente, clients, by = "CustomerID")
View(jointure)
summarise(group_by(jointure,CustomerCategory), nb =n())
jointure %>% group_by(CustomerCategory) %>% summarise(somme = sum(MontantTotal, na.rm = T), moyenne = mean(MontantTotal, na.rm = T), nombre = n())
clients <- read.csv("C:/Users/hp/Desktop/COIN STAT/DLCR/JOUR2/Base_Clients.csv", sep = ";", dec =".")
vente <- read.csv("C:/Users/hp/Desktop/COIN STAT/DLCR/JOUR2/Base_Ventes.csv", sep = ";", dec =".")
test <- read_excel("C:/Users/hp/Desktop/COIN STAT/DLCR/JOUR2/Base_Clients.xlsx")
library(readxl)
test <- read_excel("C:/Users/hp/Desktop/COIN STAT/DLCR/JOUR2/Base_Clients.xlsx")
jointure <- left_join(vente, clients, by = "CustomerID")
View(jointure)
jointure <- inner_join(vente, clients, by = "CustomerID")
jointure <- left_join(vente, clients, by = "CustomerID")
head(clients, 5)
jointure <- left_join(vente, clients, by = " CustomerID")
clients <- read.csv("C:/Users/hp/Desktop/COIN STAT/DLCR/JOUR2/Base_Clients.csv", sep = ";", dec =".")
vente <- read.csv("C:/Users/hp/Desktop/COIN STAT/DLCR/JOUR2/Base_Ventes.csv", sep = ";", dec =".")
library(readxl)
test <- read_excel("C:/Users/hp/Desktop/COIN STAT/DLCR/JOUR2/Base_Clients.xlsx")
# 5 premiers clients de la table
head(clients, 5)
# 5 derniers clientd de la table
tail(clients, 5)
# Structrure de la base de données
str(vente)
# Nombre de ligne
nrow(clients)
nrow(vente)
# nombre de colonne
ncol(clients)
ncol(vente)
dim(clients)
# nom des colonne
nom_colonne_client <- colnames(clients)
nom_colonne_vente <- colnames(vente)
# Description rapide de la base de donnée
summary(vente)
clients$AgeGroup <- as.factor(clients$AgeGroup)
clients$EducationLevel <- as.factor(clients$EducationLevel)
summary(clients)
# Les groupes de la base de données
unique(clients$AgeGroup)
# Nombre d'individu par groupe
categorie_stat <- table(clients$AgeGroup)
prop.table(categorie_stat)
summary()
jointure <- left_join(vente, clients, by = " CustomerID")
jointure <- merge(vente, clients, by ="CustomerID")
View(jointure)
require(stats) # for lowess, rpois, rnorm
require(graphics) # for plot methods
plot(x=jointure$Quantity, y = jointure$Price, xlab = "Quantité", ylab = "Prix", main = "Quantite en fonction du prix", type ="l", col ="blue")
library(ggplot2)
plot(x=jointure$Quantity, y = jointure$Price, xlab = "Quantité", ylab = "Prix", main = "Quantite en fonction du prix", type ="l", col ="blue")
ggplot(data = jointure, aes(x = Quantity, y = Price)) +
geom_point(col = "red", size = 3)+
xlab(label = "Quantite")+
ylab(label ="Prix")+
ggtitle("Quantité en fonction du prix")
ggplot(data = jointure, aes(x = Quantity, y = Price, fill = CustomerCategory)) +
geom_point( size = 3)+
scale_color_manual(values = c("blue","red","green","grey"))+
facet_wrap(~CustomerCategory)
hist(jointure$Price)
ggplot(data = jointure, aes(Price))+
geom_histogram(bins = 40, color = "blue", aes(fill=CustomerCategory))+
facet_grid(vars(CustomerCategory))
boxplot(Price ~ CustomerCategory, data = jointure)
ggplot(data = jointure, aes(x=CustomerCategory, y=Price))+
geom_boxplot(aes(fill = CustomerCategory))
ggplot(data = jointure, aes(x=CustomerCategory, y=Price))+
geom_violin(aes(fill = CustomerCategory))+
scale_fill_manual(values = c("blue", "red", "green", "grey"))
jointure$AgeGroup <- as.factor(jointure$AgeGroup)
barplot(table(jointure$AgeGroup))
install.packages("lubridate")
library(lubridate)
jointure$datebis <- dmy_hm(jointure$Date)
jointure$datebis2 <- as.Date(jointure$datebis)
mois <- month(jointure$datebis2)
mois
jour <- day(jointure$datebis2)
jour
annee <- year(jointure$datebis2)
annee
install.packages("stringr")
install.packages("tidyr")
install.packages("readr")
install.packages("purrr")
install.packages("tibble")
install.packages("tibble")
install.packages("forcats")
#Installation Renv
install.packages("renv")
vente <- read.csv("C:/Users/hp/Desktop/COIN STAT/DLCR/JOUR2/Base_Ventes.csv", sep = ";", dec =".")
clients <- read.csv("C:/Users/hp/Desktop/COIN STAT/DLCR/JOUR2/Base_Clients.csv", sep = ";", dec =".")
library(readxl)
test <- read_excel("C:/Users/hp/Desktop/COIN STAT/DLCR/JOUR2/Base_Clients.xlsx")
somme <- fonction (a,b) {
install.packages("xfun")
#| echo: false
# écrire du code
data("mtcars")
#| echo: false
summary(mtcars)
#| echo: false
library(ggplot2)
ggplot(data = mtcars, aes(x="Consommation des véhicules", y = mpg))+
geom_boxplot(color="blue", fill="blue")
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
plot(mtcars)
base_quanti <- mtcars[,-which(names(mtcars) %in% c("vs","am"))]
base_quanti <- mtcars[,-which(names(mtcars) %in% c("vs","am"))]
base_quanti
# Install and load reshape2 package
#install.packages("reshape2")
library(reshape2)
# creating correlation matrix
corr_mat <- round(cor(base_quanti),2)
# reduce the size of correlation matrix
melted_corr_mat <- melt(corr_mat)
head(melted_corr_mat)
# plotting the correlation heatmap
library(ggplot2)
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2,
fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value),
color = "black", size = 2)
ggplot(data = mtcars, aes(x=am,y=mpg))+
geom_boxplot(aes(fill=mpg))
install.packages("yaml")
install.packages("cars"")
install.packages("cars")
install.packages("cars")
# Réalisation d'un t-test pour comparer les moyennes de 'mpg' entre les voitures à transmission manuelle et automatique
t.test(mpg ~ am, data=mtcars)
# Création d'un QQ-plot pour la variable 'mpg'
qqnorm(mtcars$mpg)
qqline(mtcars$mpg, col = "red")
install.packages("cars")
# Chargement du package
library(car)
# Réalisation du test de Levene sur 'mpg' en fonction du type de transmission 'am'
leveneTest(mpg ~ am, data=mtcars)
model <- lm(mpg ~ ., data = mtcars )
summary(model)
df <-  read.csv("C:/Users/hp/Desktop/COIN STAT/DLCR/JOUR6.csv")
df <-  read.csv("C:/Users/hp/Desktop/COIN STAT/DLCR/JOUR6.titanic.csv")
df <-  read.csv("C:/Users/hp/Desktop/COIN STAT/DLCR/JOUR6/titanic.csv")
#install.packages("caret")
library(caret)
summary(df)
# imputer les valeurs manquantes par le moyenne
df$Age[is.na(df$Age)] <- mean(df$Age, na.rm = T)
str(df)
df$Survived <- as.factor(df$Survived)
df$Sex <- as.factor(df$Sex)
df$Pclass <- as.factor(df$Pclass)
#install.packages(caret)
df <-df[, c(2,3,5,6,7,8,10)]
library(caret)
set.seed(123)# Assurer la reproductibilité de votre
index <- createDataPartition(df$Survived,p=0.7, list=F)
base_train <- df[index, ]
base_test <- df[-index,]
names(base_train)
model_logistique <- glm(Survived ~ ., family = binomial, data = base_train)
model_logistique2 <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare, family = binomial, data = base_train)
summary(model_logistique)
anova(model_logistique, test = "Chisq")
# Significativité globale du modèle
G2 = model_logistique$null.deviance-model_logistique$deviance
1-pchisq(G2,df=1)
prediction <- predict(model_logistique, type = "response")
prediction
prediction <- predict(model_logistique,type = "response")
prediction
roc_obj <- roc(base_train$Survived, prediction, levels=c("0", "1"))
# Package pour l'évaluation des modèles
#install.packages("pROC")
library(pROC)
prediction <- predict(model_logistique, newdata = base_test[,-1],type = "response")
roc_obj <- roc(base_test$Survived, prediction, levels=c("0", "1"))
print(auc(roc_obj))
plot(roc_obj, main="Courbe ROC")
roc_resultat <- roc(response = base_test$Survived, predictor = prediction)
auc_resultat <- auc(roc_resultat)
auc_resultat
prediction <- predict(model_logistique,type = "response")
prediction
roc_obj <- roc(base_train$Survived, prediction, levels=c("0", "1"))
print(auc(roc_obj))
plot(roc_obj, main="Courbe ROC")
roc_resultat <- roc(response = base_train$Survived, predictor = prediction)
auc_resultat <- auc(roc_resultat)
auc_resultat
#install.packages("randomForest")
library(randomForest)
model_rf <- randomForest(Survived ~ ., data=base_train, importance=TRUE,
ntree=500)
model_rf
# Importance des variables
varImp(model_rf)
varImpPlot(model_rf)
plot(model_rf)
prediction_train <-  predict(model_rf, type = "prob")[,2]
roc_obj <- roc(base_train$Survived, prediction_train, levels=c("0", "1"))
print(auc(roc_obj))
plot(roc_obj, main="Courbe ROC")
roc_obj <- roc(base_test$Survived, prediction_test, levels=c("0", "1"))
prediction_test <- predict(model_rf, newdata = base_test, type = "prob")[,2]
roc_obj <- roc(base_test$Survived, prediction_test, levels=c("0", "1"))
print(auc(roc_obj))
plot(roc_obj, main="Courbe ROC")
# Définition des paramètres de validation croisée
control <- trainControl(method="cv", number=5, search="grid")
# Grid de paramètres à tester
tunegrid <- expand.grid(.mtry=c(1, 2, 3, 4, 5))
# Entraînement du modèle avec validation croisée et recherche des meilleurs hyperparamètres
rf_model <- train(Survived ~ ., data=base_train, method="rf", trControl=control, tuneGrid=tunegrid, ntree=500)
# Meilleurs paramètres trouvés
print(rf_model$bestTune)
# Entraînement direct avec randomForest pour accès à l'erreur OOB
rf_model_direct <- randomForest(Survived ~ ., data=base_train, mtry=rf_model$bestTune$mtry, ntree=500)
plot(rf_model_direct)
# Importance des variables
importance <- varImp(rf_model, scale=FALSE)
print(importance)
# Prédiction sur l'ensemble de test
predictions <- predict(rf_model, newdata=base_test)
# Calcul de l'AUC et tracé de la courbe ROC
prob_predictions <- predict(rf_model, newdata=base_test, type="prob")
roc_obj <- roc(base_test$Survived, prob_predictions[,2], levels=c("0", "1"))
print(auc(roc_obj))
plot(roc_obj, main="Courbe ROC")
# Stocker le modèle
saveRDS(model_logistique, "C:/Users/hp/Desktop/COIN STAT/DLCR/JOUR6/model_logistique_final.rds")
# Stocker le modèle
saveRDS(model_rf, "C:/Users/hp/Desktop/COIN STAT/DLCR/JOUR6/model_randomforest.rds")
shiny::runApp('C:/Users/hp/Desktop/COIN STAT/DLCR/JOUR7')
install.packages("shiny")
install.packages("shinydashboard")
shiny::runApp('C:/Users/hp/Desktop/COIN STAT/DLCR/JOUR7/Survie_Titanic')
runApp('C:/Users/hp/Desktop/COIN STAT/DLCR/JOUR7/Survie_Titanic')
